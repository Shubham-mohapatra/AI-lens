# services/llm_service.py
import os
import logging
from typing import Optional
import asyncio
import requests
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
GEMINI_ENDPOINT = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"

async def generate_summary(
    caption: str, 
    max_length: int = 150, 
    style: str = "descriptive"
) -> str:
    """Generate an enhanced summary from image caption using Google Gemini"""
    try:
        # If Gemini API key is available, use it
        if GEMINI_API_KEY:
            return await generate_summary_with_gemini(caption, max_length, style)
        else:
            # Fallback to simple template-based generation
            logger.warning("No Gemini API key found. Using fallback generation.")
            return await generate_summary_fallback(caption, max_length, style)
        
    except Exception as e:
        logger.error(f"Error generating summary: {e}")
        # Fallback to simple generation if Gemini fails
        return await generate_summary_fallback(caption, max_length, style)

async def generate_summary_with_gemini(
    caption: str, 
    max_length: int = 150, 
    style: str = "descriptive"
) -> str:
    """Generate summary using Google Gemini API"""
    try:
        # Create style-specific prompts
        style_prompts = {
            "descriptive": f"Analyze this image description and create a detailed, engaging summary in {max_length} characters or less: '{caption}'. Focus on visual elements, composition, and atmosphere.",
            
            "technical": f"Provide a technical analysis of this image description in {max_length} characters or less: '{caption}'. Focus on objects, layout, colors, and photographic elements.",
            
            "creative": f"Write a creative, artistic interpretation of this image description in {max_length} characters or less: '{caption}'. Use vivid language and focus on mood and storytelling.",
            
            "concise": f"Summarize this image description in {max_length} characters or less, being very concise: '{caption}'. Just the key elements.",
            
            "contextual": f"Analyze this image description and provide context about what this might be used for, where it might be found, or what category it belongs to in {max_length} characters or less: '{caption}'"
        }
        
        prompt = style_prompts.get(style, style_prompts["descriptive"])
        
        # Prepare request payload
        payload = {
            "contents": [{
                "parts": [{
                    "text": prompt
                }]
            }],
            "generationConfig": {
                "temperature": 0.7,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": max_length // 4,  # Rough token estimate
                "stopSequences": []
            }
        }
        
        headers = {
            "Content-Type": "application/json",
            "x-goog-api-key": GEMINI_API_KEY
        }
        
        # Make request to Gemini API
        response = requests.post(
            f"{GEMINI_ENDPOINT}?key={GEMINI_API_KEY}",
            json=payload,
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            
            if "candidates" in result and len(result["candidates"]) > 0:
                summary = result["candidates"][0]["content"]["parts"][0]["text"].strip()
                
                # Ensure it's within length limit
                if len(summary) > max_length:
                    summary = summary[:max_length-3] + "..."
                
                logger.info(f"Generated {style} summary using Gemini: {summary[:50]}...")
                return summary
            else:
                raise Exception("No summary generated by Gemini")
        else:
            raise Exception(f"Gemini API error: {response.status_code} - {response.text}")
        
    except Exception as e:
        logger.error(f"Error with Gemini API: {e}")
        raise

async def generate_summary_fallback(
    caption: str, 
    max_length: int = 150, 
    style: str = "descriptive"
) -> str:
    """Fallback summary generation when Gemini is not available"""
    try:
        await asyncio.sleep(0.1)  # Simulate processing time
        
        if style == "descriptive":
            summary = f"This image shows {caption.lower()}. The scene captures various visual elements that contribute to the overall composition and atmosphere."
        elif style == "technical":
            summary = f"Image analysis reveals: {caption}. Key visual features and objects have been identified through computer vision processing."
        elif style == "creative":
            summary = f"A captivating scene where {caption.lower()}, creating a moment that draws the viewer's attention to the intricate details and storytelling elements within the frame."
        elif style == "contextual":
            summary = f"Context: {caption}. This appears to be captured in a specific setting with particular visual characteristics that suggest its purpose or category."
        else:
            summary = f"Summary: {caption}"
        
        # Truncate if too long
        if len(summary) > max_length:
            summary = summary[:max_length-3] + "..."
        
        logger.info(f"Generated {style} fallback summary for caption: {caption[:50]}...")
        return summary
        
    except Exception as e:
        logger.error(f"Error generating fallback summary: {e}")
        return f"Summary: {caption}"

async def enhance_caption_context(caption: str) -> str:
    """Enhance caption with better context for search queries"""
    try:
        if GEMINI_API_KEY:
            prompt = f"""
            Analyze this image description and generate better search keywords for finding similar images online.
            
            Original description: "{caption}"
            
            Provide:
            1. Category (fashion, nature, food, technology, etc.)
            2. Style keywords (modern, vintage, minimalist, etc.) 
            3. Context keywords (lifestyle, professional, casual, etc.)
            4. Visual keywords (colors, lighting, composition)
            
            Return as a single search-friendly phrase, maximum 50 characters.
            Focus on broad concepts rather than specific details.
            """
            
            payload = {
                "contents": [{
                    "parts": [{
                        "text": prompt
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.3,
                    "maxOutputTokens": 100
                }
            }
            
            headers = {
                "Content-Type": "application/json"
            }
            
            response = requests.post(
                f"{GEMINI_ENDPOINT}?key={GEMINI_API_KEY}",
                json=payload,
                headers=headers,
                timeout=8
            )
            
            if response.status_code == 200:
                result = response.json()
                if "candidates" in result and len(result["candidates"]) > 0:
                    enhanced = result["candidates"][0]["content"]["parts"][0]["text"].strip()
                    # Clean up the response
                    enhanced = enhanced.replace('"', '').replace('\n', ' ').strip()
                    if len(enhanced) > 50:
                        enhanced = enhanced[:47] + "..."
                    
                    logger.info(f"Enhanced caption: '{caption}' -> '{enhanced}'")
                    return enhanced
        
        # Fallback enhancement
        return enhance_caption_fallback(caption)
        
    except Exception as e:
        logger.error(f"Error enhancing caption: {e}")
        return enhance_caption_fallback(caption)

def enhance_caption_fallback(caption: str) -> str:
    """Fallback caption enhancement"""
    # Simple rules-based enhancement
    caption_lower = caption.lower()
    
    # Fashion detection
    if any(word in caption_lower for word in ["shirt", "pants", "dress", "jacket", "clothing", "wearing", "fashion"]):
        if any(word in caption_lower for word in ["casual", "relaxed", "comfortable"]):
            return "casual fashion style clothing"
        elif any(word in caption_lower for word in ["professional", "business", "formal"]):
            return "professional business attire"
        else:
            return "fashion clothing style"
    
    # Food detection
    elif any(word in caption_lower for word in ["food", "dish", "meal", "cooking", "restaurant"]):
        return "delicious food cuisine"
    
    # Nature detection
    elif any(word in caption_lower for word in ["tree", "flower", "plant", "nature", "outdoor", "landscape"]):
        return "beautiful nature landscape"
    
    # Technology detection
    elif any(word in caption_lower for word in ["phone", "computer", "device", "technology", "electronic"]):
        return "modern technology device"
    
    # Default enhancement
    else:
        # Extract key nouns and adjectives
        words = caption.split()
        key_words = [w for w in words if len(w) > 3 and w.lower() not in ["with", "from", "that", "this", "image", "photo"]]
        if key_words:
            return " ".join(key_words[:3])
        else:
            return caption
